{"ast":null,"code":"import _slicedToArray from \"/Users/tk_user/Documents/todo-list/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tk_user/Documents/todo-list/src/components/todo-list-item/todo-list-item.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { toggleTodo, deleteTodo, editTodo } from './../../data/actions';\nimport './todo-list-item.scss';\n\nconst TodoListItem = ({\n  id,\n  label,\n  editTodo,\n  deleteTodo,\n  toggleTodo,\n  done\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        editMode = _useState2[0],\n        setEditMode = _useState2[1]; //Для cross out\n\n\n  let classNames = 'todo-list-item';\n  if (done) classNames += ' done'; //будем изменять newLabel только при переходе в edit mode\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newLabel = _useState4[0],\n        setNewLabel = _useState4[1];\n\n  const onLabelChange = e => {\n    setNewLabel(e.target.value);\n  }; //САМОЕ ВАЖНОЕ!!!!\n  //Нажатие кнопки редактирования,\n  //Если первый раз, то переходим в edit mode, предварительно положив в новый заголовок старый\n  //В случае повторного нажатия, если строка не стала пустой изменяем\n  //в глобальном хранилище todo, иначе вообще удаляем пустую строку\n\n\n  const classNameEdit = editMode ? \"btn btn-outline-dark btn-sm float-right active\" : \"btn btn-outline-dark btn-sm float-right\";\n\n  const onEditClick = () => {\n    if (editMode) {\n      newLabel === '' ? deleteTodo(id) : editTodo(id, newLabel);\n      setEditMode(false);\n    } else {\n      setNewLabel(label);\n      setEditMode(true);\n    }\n  }; //если режим редактирования включен, создаем инпут , иначе спан\n\n\n  const item = editMode ? React.createElement(\"input\", {\n    className: \"todo-list-item-label-edit\",\n    value: newLabel,\n    onChange: onLabelChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, label);\n  return React.createElement(\"span\", {\n    className: classNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"todo-list-item-label\",\n    onClick: () => toggleTodo(id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, item), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-outline-danger btn-sm float-right\",\n    onClick: () => deleteTodo(id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa fa-trash-o\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"button\",\n    className: classNameEdit,\n    onClick: () => onEditClick(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa fa-pencil\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })));\n}; //выполнить, удалить, редактировать\n\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTodo: id => dispatch(toggleTodo(id)),\n  deleteTodo: id => dispatch(deleteTodo(id)),\n  editTodo: (id, label) => dispatch(editTodo(id, label))\n});\n\nexport default connect(null, mapDispatchToProps)(TodoListItem);","map":{"version":3,"sources":["/Users/tk_user/Documents/todo-list/src/components/todo-list-item/todo-list-item.js"],"names":["React","useState","connect","toggleTodo","deleteTodo","editTodo","TodoListItem","id","label","done","editMode","setEditMode","classNames","newLabel","setNewLabel","onLabelChange","e","target","value","classNameEdit","onEditClick","item","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {connect} from 'react-redux';\nimport {toggleTodo,deleteTodo, editTodo} from './../../data/actions';\nimport './todo-list-item.scss';\n\nconst TodoListItem =({id,label,editTodo, deleteTodo,toggleTodo,done})=>{\n\n    const [editMode,setEditMode]=useState(false);\n\n\n    //Для cross out\n    let classNames='todo-list-item';\n    if (done) classNames+=' done';\n\n\n    //будем изменять newLabel только при переходе в edit mode\n    const [newLabel, setNewLabel]=useState('');\n    const onLabelChange=(e)=>{\n      setNewLabel(e.target.value);\n    };\n\n\n    //САМОЕ ВАЖНОЕ!!!!\n    //Нажатие кнопки редактирования,\n    //Если первый раз, то переходим в edit mode, предварительно положив в новый заголовок старый\n    //В случае повторного нажатия, если строка не стала пустой изменяем\n    //в глобальном хранилище todo, иначе вообще удаляем пустую строку\n    const classNameEdit=editMode?\n    \"btn btn-outline-dark btn-sm float-right active\":\n    \"btn btn-outline-dark btn-sm float-right\"\n    const onEditClick=()=>{\n        if(editMode){\n            newLabel===''?\n                  deleteTodo(id):editTodo(id,newLabel);\n            setEditMode(false);\n        }else{\n            setNewLabel(label);\n            setEditMode(true);\n        }\n    };\n\n\n    //если режим редактирования включен, создаем инпут , иначе спан\n    const item=editMode?\n          <input\n                className='todo-list-item-label-edit'\n                value={newLabel}\n                onChange={onLabelChange}\n          />:\n          <span>{label}</span>\n\n\n    return (\n      <span className={classNames}>\n            <span\n                className=\"todo-list-item-label\"\n                onClick={()=>toggleTodo(id)}>\n                {item}\n            </span>\n\n            <button type=\"button\"\n                className=\"btn btn-outline-danger btn-sm float-right\"\n                onClick={()=>deleteTodo(id)}>\n                <i className=\"fa fa-trash-o\" />\n            </button>\n            <button type=\"button\"\n                className={classNameEdit}\n                onClick={()=>onEditClick()}>\n                <i className=\"fa fa-pencil\" />\n            </button>\n      </span>\n    );\n};\n\n//выполнить, удалить, редактировать\nconst mapDispatchToProps = dispatch => ({\n      toggleTodo: (id) => dispatch(toggleTodo(id)),\n      deleteTodo: (id) => dispatch(deleteTodo(id)),\n      editTodo:(id,label)=>dispatch(editTodo(id, label))\n})\n\n\nexport default connect(null,mapDispatchToProps)(TodoListItem);\n"]},"metadata":{},"sourceType":"module"}